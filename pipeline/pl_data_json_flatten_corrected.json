{
	"name": "pl_data_json_flatten_corrected",
	"properties": {
		"activities": [
			{
				"name": "Get JSON data",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "JsonSource",
						"storeSettings": {
							"type": "AzureBlobStorageReadSettings",
							"recursive": true
						}
					}
				}
			},
			{
				"name": "For Each Events",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Get JSON data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Get JSON data').output.firstRow.events",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Log Event",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "7.00:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[dbo].[sp_adf_pipeline_log_event]",
								"storedProcedureParameters": {
									"process": {
										"value": {
											"value": "@item().process",
											"type": "Expression"
										},
										"type": "String"
									},
									"start_time": {
										"value": {
											"value": "@item().start_time",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"stop_time": {
										"value": {
											"value": "@if(contains(string(item()),'\"stop_time\":'),item().stop_time,null)",
											"type": "Expression"
										},
										"type": "DateTime"
									},
									"last_update": {
										"value": {
											"value": "@if(contains(string(item()),'\"last_update\":'),item().last_update,utcNow())",
											"type": "Expression"
										},
										"type": "Datetime"
									}
								}
							}
						}
					]
				}
			}
		],
		"variables": {
			"event": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "UsecaseDemo"
		},
		"annotations": []
	}
}